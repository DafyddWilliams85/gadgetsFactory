# A node red node typically consist of a pair of files; a JavaScript file that defines what the node does, and an html file that defines the node’s properties, edit dialog and help text.

A package.json file is used to package it all together as an npm module.

## In the case of file system manager node we have :

The package.json wish contains a single dependency the fs-jetpack module, that was chosen to make it easy to handle file system operations, that in scenario of a web app are by default part of a request response process and therefore these are asynchronous operations.

{
  "name": "node-red-fsmanager",
  "version": "0.1.0",
  "description": "Node Red Node, advanced file system manager",
  "author": {
    "name": "Bruno de Sousa"
  },
  "license": "Comercial",
  "dependencies": {
    "fs-jetpack": "^2.1.1"
    },
  "engines": {
    "node": "*"
  },
  "node-red": {
    "nodes": {
      "fsmanager": "fsmanager.js"
    }
  }
}


## Then we have the  JavaScript file fsmanager.js

the file is made of the node-red wrraper like any other node and it starts with a mandatory:

module.exports = function (RED) {

## Then  just after at the top we require our dependency the : fs-jetpack library.

    const jetpack = require('fs-jetpack');

## Then  we  declare  the  fileSystemPath which will be used to set the root of the file system

    var fileSystemPath, openOnFolder;

## Then it starts the main function that will be registered with node-red as being the node this is default from node-red

    function fileManagerNode(n) {

        RED.nodes.createNode(this, n);

        var node = this;

##  With this we can use the node methods so will use the default listen to get the input msg.

node.on('input', function (msg, req) {


## Then we have a sequence of conditionals to check if the msg.payload and it’s contents are present and of the correct type.

            if (typeof msg.payload !== "object") {

                err = {
                  Error: 'The payload must be an object!'
                };

                node.error(err);
		
	    return;
            }

            if (msg.payload.fileSystemPath) {

                fileSystemPath = msg.payload.fileSystemPath;
            }
            else {

                err = {
                  Error: 'You must set a fileSystemPath!'
                };

                node.error(err);

                return;
            }
            if (!msg.payload.openOnFolder && msg.payload.removePath) {

                openOnFolder = msg.payload.openOnFolder;

                err = {
                  Error: 'You must set a openOnFolder!'
                };

                node.error(err);

                return;
            }
            else {

                openOnFolder = msg.payload.openOnFolder;
            }

## Now the rest of this code is simple and made of two parts :

-A switch block to catch the incoming fs operations “fsop” and perform thye correspondent actions, and a set of helper functions that wrappers over fs-jetpack mthods:

####  switch block

switch (msg.payload.fsop) { 

          case "listAll":

          case "listDir":

          case "removeObject":

          case "renameObject":

          case "moveObject":

          case "copyObject":

          case "createDir":

          case "readFile":

          case "writeFile":
}

####  Helper functions

asyncSpacelist = function(_callback)
asyncDirlist = function(userDirPath, _callback)
asyncRemove = function(removePath, _callback)
asyncInspect = function(objectPath, _callback)
asyncRename = function(renameFrom, renameTo, _callback)
asyncMove = function(moveFrom, moveTo, _callback)
asyncCopy = function(copyFrom, copyTo, _callback)
dirAsync = function(dirPath, _callback)
readFileAsync = function(filePath, _callback)
writeFileAsync = function(filePath, data, _callback) 
existsAsync = function(path, _callback) 


## How does it work? 

When  the  switch block sees the file system operation {“fsop” :  “[operation]” it goes trough a set of validations to check if the data for the operation is valid and the calls the appropriate helper functions to perform the operation:

Let’s take the copyObject operation for example: - When  the  switch block sees the file system operation copyObject {“fsop” :  “copyObject” goes trough the following code:


So it first checks for the contents delivered on the object to run the operation, so first checks if the mandatory data to perform the operations is there and then if the source path exists, if the destination object exists, and afterwards either runs the operation by calling the helper function asyncCopy,  asyncInspect and send the msg with the relevant info for the operation or it issues an error in case of any of the validations goes wrong.


case "copyObject":

    {
      if (msg.payload.copyFrom && msg.payload.copyTo) {
        if (msg.payload.copyFrom.charAt(0) === '/') {
          var copyFrom = fileSystemPath + msg.payload.copyFrom;
        } else {
          var copyFrom = fileSystemPath + '/' + msg.payload.copyFrom;
        }
        if (msg.payload.copyTo.charAt(0) === '/') {
          var copyTo = fileSystemPath + msg.payload.copyTo;
        } else {
          var copyTo = fileSystemPath + '/' + msg.payload.copyTo;
        }

        existsAsync(copyFrom, function(exists) {
          if (exists) {
            existsAsync(copyTo, function(exists) {
              console.log('die dafydd , in a car fire please i prey to the goods', exists);
              if (!exists) {
                asyncCopy(copyFrom, copyTo, function(resp) {
                  asyncInspect(copyTo, function(item) {
                    item.absolutePath = item.absolutePath.replace(fileSystemPath, "");
                    msg.payload = {
                      Item: item
                    };
                    node.send(msg);
                  });
                });
              } else {
                err = {
                  Error: 'Error the destination path: ' + copyTo + '    already exists!'
                };
                node.error(err);
                return;
              }
            });
          } else {
            err = {
              Error: 'Error the path: ' + copyFrom + '    is not valid!'
            };
            node.error(err);
            return;
          }
        });

      }
      break;
}


How are the helper functions written

For our example let’s have a look at  asyncCopy since they are all written in the same manner:

    var asyncCopy = function(copyFrom, copyTo, _callback) {
      jetpack.copyAsync(copyFrom, copyTo).then(function success(res) {
        _callback(res);
      }, function error(err) {
        _callback(err);
      });
    }

As you can see the function takes three parameters  copyFrom, copyTo, _callback:
- The copyFrom is the path to copy the file from and copyTo  the destination path to copy the file.
- The _callback is present in all helper files due to the fact the these operations are asynchronous
So when we get a response from the  jetpack.copyAsync call we make the _callback to the calling switch block and there the results will build the message to be sent back to the node with node.send(msg);.




